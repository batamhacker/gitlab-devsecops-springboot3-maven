stages:
  - pre-build
  - verify
  - test
  - build
  - publish
  - scanning
  - deploy

default:
  tags:
    - docker

variables:
  DEFAULT_MAVEN_CLI_OPTS: "--show-version -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_JDK_VERSION: "3.8.5-openjdk-17"
  DOCKER_VERSION: "stable"
  DOCKER_DIND_VERSION: "18.09-dind"

include:
  - template: Security/Container-Scanning.gitlab-ci.yml

get-fact-project-info:
  image: maven:${MAVEN_JDK_VERSION}
  cache:
    paths:
      - .m2/repository
  stage: pre-build
  script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS versions:set -DnewVersion=$CI_COMMIT_REF_SLUG
    - MVN_BUILD_FILE_NAME=$(mvn -s $M2_SETTINGS_XML -N -q -DforceStdout help:evaluate -Dexpression="project.build.finalName").jar
    - MVN_PROJECT_NAME=$(mvn -s $M2_SETTINGS_XML -N -q -DforceStdout help:evaluate -Dexpression="project.artifactId")
    - MVN_PROJECT_GROUP_ID=$(mvn -s $M2_SETTINGS_XML -N -q -DforceStdout help:evaluate -Dexpression="project.groupId")
    - echo "JAR_FILE=$MVN_BUILD_FILE_NAME" >> deploy.env
    - echo "PROJECT_NAME=${MVN_PROJECT_NAME}" >> deploy.env
    - echo "PROJECT_GROUP_ID=${MVN_PROJECT_GROUP_ID}" >> deploy.env
    - echo "CI_PARENT_PROJECT_NAME=${MVN_PROJECT_NAME}" >> deploy.env
    - echo "CI_PARENT_PROJECT_GROUP_ID=${MVN_PROJECT_GROUP_ID}" >> deploy.env
    - echo "CI_PARENT_COMMIT_TAG=${CI_COMMIT_TAG}" >> deploy.env
    - echo "CI_PARENT_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}" >> deploy.env
    - echo "CI_PARENT_PIPELINE_PROJECT_ID=${CI_PROJECT_ID}" >> deploy.env
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
    paths:
      - deploy.env
    reports:
      dotenv: deploy.env

test-junit:
  stage: verify
  allow_failure: true
  image: maven:${MAVEN_JDK_VERSION}
  cache:
    paths:
      - .m2/repository
  before_script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS versions:set -DnewVersion=$CI_COMMIT_REF_SLUG
  script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS test jacoco:prepare-agent jacoco:report
  artifacts:
    paths:
      - target/site/jacoco
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml

sonarqube-check:
  stage: verify
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "1"
    SONAR_SCANNER_OPTS: "-Xmx512m"
  needs:
    - test-junit
  image:
    name: maven:${MAVEN_JDK_VERSION}
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS verify sonar:sonar -Dsonar.projectBaseDir="${CI_PROJECT_DIR}" -Dsonar.host.url="${SONAR_URL}" -Dsonar.token="${SONAR_AUTH}"
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_PIPELINE_SOURCE == 'merge_request_event'

build-jar:
  image: maven:${MAVEN_JDK_VERSION}
  cache:
    paths:
      - .m2/repository
  stage: build
  needs:
    - get-fact-project-info
    - test-junit
  before_script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS versions:set -DnewVersion=$CI_COMMIT_REF_SLUG
  script:
    - mvn -s $M2_SETTINGS_XML $DEFAULT_MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    name: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG

build-docker:
  stage: publish
  image: docker:${DOCKER_VERSION}
  services:
    - name: docker:${DOCKER_DIND_VERSION}
      entrypoint: ["dockerd-entrypoint.sh"]
      command: [
        "--insecure-registry=private.nexus-registry.docker.local:8087",
        "--insecure-registry=private.nexus-registry.docker.local:8086"
      ]
      alias: dockerd
  needs:
    - get-fact-project-info
    - build-jar
  variables:
    DOCKER_HOST: tcp://dockerd:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILD_ARGS_ENTRIPOINT: "--build-arg JAR_FILE=$JAR_FILE"
    DOCKERFILE_LOCATION: "-f Dockerfile"
    DOCKER_TAGS:
      private.nexus-registry.docker.local:8087/$PROJECT_GROUP_ID/$PROJECT_NAME
    DOCKER_CONTEXT_PATH: "."
  before_script:
    - mkdir -p .docker/ && cat $DOCKER_CONF_JSON > .docker/config.json
  script:
    - docker build -q $DOCKERFILE_LOCATION $DOCKER_BUILD_ARGS_ENTRIPOINT -t $PROJECT_GROUP_ID/$PROJECT_NAME:latest $DOCKER_CONTEXT_PATH
    - >
      for TAG in ${DOCKER_TAGS};
      do
          echo "--------------------------------";
          echo "docker image tag $TAG";
          docker image tag $PROJECT_GROUP_ID/$PROJECT_NAME:latest $TAG:$CI_COMMIT_REF_SLUG
          docker image tag $PROJECT_GROUP_ID/$PROJECT_NAME:latest $TAG:$CI_COMMIT_SHORT_SHA
          echo "--------------------------------";
          echo "docker image push $TAG";
          docker --config .docker image push $TAG:$CI_COMMIT_REF_SLUG
          docker --config .docker image push $TAG:$CI_COMMIT_SHORT_SHA
          echo "--------------------------------";
      done

container_scanning:
  stage: publish
  needs:
    - build-docker
  variables:
    GIT_STRATEGY: 1
    SECURE_LOG_LEVEL: debug
    CS_DOCKER_INSECURE: "true"
    CS_REGISTRY_INSECURE: "true"
    CI_REGISTRY_IMAGE: private.nexus-registry.docker.local:8087/$PROJECT_GROUP_ID/$PROJECT_NAME
    CS_DISABLE_DEPENDENCY_LIST: "true"
    CS_DOCKERFILE_PATH: $CI_PROJECT_DIR/Dockerfile
    CS_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA